*** NOTE ***
When viewing this file in Visual Studio Code use Todo+ plugin
    ext install fabiospampinato.vscode-todo-plus
and add following line to settings
    "todo.symbols.box": "❑"

Parser:
    ✔ Add conversion from `RegExpTail` to `RegularExpression` @done(17-12-10 03:45)
    ✔ Handle whitespaces in regular expression parsing @done(17-12-10 14:09)
    ✔ Test query parsing @done(17-12-10 15:59)
    ✔ Improve syntax (possibly use FsLex and FsYacc) @today @done(18-02-24 04:44)
    ✔ Parse simple arithmetic constraints (sum by) @today @done(18-02-24 20:11)
    ✔ Parse Let expressions @done(18-04-17 01:35)
    ❑ Parse other arithmetic constraints (max, min, count?)
    ❑ Add node constraint which returns bool (only one operand in expression) or add bool value @low
    ❑ Parse complex node constraints (??)
    ❑ Parse ontologies

Query execution:
    ✔ Build NFA @done(17-12-18 23:16)
    ✔ Regular expression matching (1-node constraints) @today @done(18-01-13 21:00)
    ✔ 1-Node constraints checking @today @done(18-01-13 17:10)
    ✔ Instantiate free variables with found nodes (basic) @done(18-01-14 01:49)
    ✔ k-node constraints checking @high @done(18-02-18 20:17)
    ✔ Handle k-path constraints (basic) @high @done(18-02-04 02:17)
    ✔ Regular expression matching (k-node constraints, basic version) @high @done(18-02-18 20:16)
    ✔ Matching same final-nodes used in different paths @high @today @done(18-02-21 00:23)
    ✔ Handle cycles (only with matched nodes) @critical @done(18-02-21 16:26)
    ✔ Matching simple arithmetic constraints (no cycles, only sum by) @high @today @done(18-02-25 21:56)
    ❑ Ontologies (let expressions) @high @today 
        ❑ new label: // till thursday
            ❑ on nodes // till thursday
            ❑ on edges // till thursday
        ❑ regular constraints // till friday
        ❑ query // till friday
        
    // till saturday
    ❑ Matching more complex arithmetic constraints (no cycles, max, min, count) @high @today
    ❑ Improved matching of arithmetic constraints with cycles @high
        ✔ Store preds @done(18-03-25 00:58)
        ✔ Restore path (sub-graph) @done(18-03-25 04:13)
        ✔ Find all cycles (Johnson's algorithm) @done(18-03-30 16:56)
        ❑ Compute attributes delta on every cycle
            ✔ on nodes @done(18-03-31 16:09)
            ❑ on edges
        ✔ Solve linear inequalities @today @done(18-04-06 18:42)
        ✔ Add existing arithStates @critical @done(18-04-07 03:13)
        ✔ Remove arithStates from equality checks @critical @done(18-04-07 02:47)
        ✔ Solution exists predicate (for matching nodes) @today @done(18-04-06 18:42)
        ❑ Create answer from solution
    ❑ Existentially qualified paths and nodes 
    ❑ Return last node before sink node @high @today 
    ❑ Move functions from regularConstraints to queryExecution module @high 
    ❑ Optimisation: Neighbour queries for k-node constraints @high
    ❑ Bool type
    // till sunday
    ❑ Return paths @medium 
    // sunday ??
    ❑ Sequence of nodes in path constraints (p: u..v) @high 
    ❑ Match nodes that satisfy regular constraints (as a whole) @high 
    ❑ Maybe represent Regex NFA as Hekate graph (?) @low
    ❑ Improve equality check in Transition (?) @low

Graph / Data storage:
    ✔ Basic graph representation @done(18-01-13 16:03)
    ✔ Graph import @medium @done(18-02-26 03:35)
    // sunday or next week
    ❑ Sample graph data (real world data)
    ❑ Optimized graph representation and storage @medium

Client / General:
    ❑ Separate client from service: @high 
        ❑ Handle communication between client and service
        ✔ Basic Command line interface @high @done(18-02-26 03:35)
    ❑ Logging with Logary 
    ❑ Results visualisation WebUI  @high 
    ❑ Docker installation @high 

Docs:
    ❑ Examples of usage @high 
    ❑ Description of files @high 
    ❑ Wiki
    ✔ Add README.md file @done(17-12-10 16:24)

To think:
    ✔ Paths of different length (loop on sink node) @done(18-04-06 18:44)
    ❑ Ontologies return type (node set vs int)
    ✔ Arithmetic constraints for graphs with cycles @done(18-04-06 18:44)

    ❑ Registers
    ❑ Negation