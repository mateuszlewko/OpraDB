*** NOTE ***
When viewing this file in Visual Studio Code use Todo+ plugin
    ext install fabiospampinato.vscode-todo-plus
and add following line to settings
    "todo.symbols.box": "❑"

Parser:
    ✔ Add conversion from `RegExpTail` to `RegularExpression` @done(17-12-10 03:45)
    ✔ Handle whitespaces in regular expression parsing @done(17-12-10 14:09)
    ✔ Test query parsing @done(17-12-10 15:59)
    ✔ Improve syntax (possibly use FsLex and FsYacc) @today @done(18-02-24 04:44)
    ✔ Parse simple arithmetic constraints (sum by) @today @done(18-02-24 20:11)
    ✔ Parse Let expressions @done(18-04-17 01:35)
    ✔ Parse value expressions @today @done(18-04-22 00:53)
    ✔ Parse other arithmetic constraints (max, min, count?) @high @done(18-07-12 21:02)
    ✔ Add node constraint which returns bool (only one operand in expression) or add bool value @low @today @done(18-04-22 00:53)
    ✔ Parse matching of node labels @done(18-07-13 00:52)

Query execution:
    ✔ Build NFA @done(17-12-18 23:16)
    ✔ Regular expression matching (1-node constraints) @today @done(18-01-13 21:00)
    ✔ 1-Node constraints checking @today @done(18-01-13 17:10)
    ✔ Instantiate free variables with found nodes (basic) @done(18-01-14 01:49)
    ✔ k-node constraints checking @high @done(18-02-18 20:17)
    ✔ Handle k-path constraints (basic) @high @done(18-02-04 02:17)
    ✔ Regular expression matching (k-node constraints, basic version) @high @done(18-02-18 20:16)
    ✔ Matching same final-nodes used in different paths @high @today @done(18-02-21 00:23)
    ✔ Handle cycles (only with matched nodes) @critical @done(18-02-21 16:26)
    ✔ Matching simple arithmetic constraints (no cycles, only sum by) @high @today @done(18-02-25 21:56)
    ✔ Ontologies (let expressions) @high @done(18-07-15 15:03)
        ✔ value expression / new label: // till thursday @done(18-04-23 03:21)
            ✔ on nodes @done(18-04-23 03:21)
            ✔ on edges @done(18-04-23 03:21)
        ✔ regular constraints @done(18-04-23 23:42)
        ✔ arithmetic constraint @today @done(18-04-25 22:31)
        ✔ query @high @done(18-07-15 15:03)
    ✔ Value Expressions in Arithmetic constraints @today @done(18-04-23 03:22)
    ✔ Value Expressions in Regular / Node constraints @today @done(18-04-23 03:22)
    ✔ Matching more complex arithmetic constraints (max, min, count) @high @done(18-07-12 21:35)
    ❑ Min / Max on all paths @high 
        ❑ Dijkstra
    ✔ Improved matching of arithmetic constraints with cycles @done(18-07-13 00:53)
        ✔ Store preds @done(18-03-25 00:58)
        ✔ Restore path (sub-graph) @done(18-03-25 04:13)
        ✔ Find all cycles (Johnson's algorithm) @done(18-03-30 16:56)
        ✔ Compute attributes delta on every cycle @done(18-04-23 03:22)
            ✔ on nodes @done(18-03-31 16:09)
            ✔ on edges @done(18-04-23 03:22)
        ✔ Solve linear inequalities @today @done(18-04-06 18:42)
        ✔ Add existing arithStates @critical @done(18-04-07 03:13)
        ✔ Remove arithStates from equality checks @critical @done(18-04-07 02:47)
        ✔ Solution exists predicate (for matching nodes) @today @done(18-04-06 18:42)
    ❑ Create answer from solution (like "traversed cycle a-b-c-a 4 times" or path)
    ✔ Return specific labels from nodes @high @done(18-07-13 00:52)
    ❑ Existentially qualified paths and nodes @high 
    ✔ Return last node before sink node @high @today @done(18-04-26 00:15)
    ❑ Move functions from regularConstraints to queryExecution module 
    ❑ Optimisation: Neighbour queries for k-node constraints
    ✔ Bool type @today @done(18-04-22 02:39)
    ❑ Return paths @medium 
    ❑ Sequence of nodes in path constraints (p: u..v)
    ❑ Match nodes that satisfy regular constraints (as a whole) 
    ❑ Maybe represent Regex NFA as Hekate graph (?) @low
    ❑ Improve equality check in Transition (?) @low

Graph / Data storage:
    ✔ Basic graph representation @done(18-01-13 16:03)
    ✔ Graph import @medium @done(18-02-26 03:35)
    ✔ Import data from xml (tinker pop schema) @high @today @done(18-04-26 05:26)
    ✔ Sample graph data (real world data) @done(18-04-26 05:26)
    ❑ Optimized graph representation and storage @low

Client / General:
    ❑ Separate client from service: @low
        ❑ Handle communication between client and service
        ✔ Basic Command line interface @high @done(18-02-26 03:35)
    ❑ Logging with Logary 
    ❑ Results visualisation WebUI  @low 
    ❑ Docker installation @medium 

Docs:
    ❑ Examples of usage @high 
    ❑ Description of files @high 
    ❑ Wiki
    ✔ Add README.md file @done(17-12-10 16:24)

To think:
    ✔ Paths of different length (loop on sink node) @done(18-04-06 18:44)
    ✔ Ontologies return type (node set vs int) @done(18-04-27 01:58)
    ✔ Ontologies with queries @done(18-07-13 20:49)
    ✔ Arithmetic constraints for graphs with cycles @done(18-04-06 18:44)

    ✔ Type coercion (strong vs weak) @done(18-04-27 01:58)
        ✔ int -> float @done(18-04-27 01:58)
        ✔ bool -> int @done(18-04-27 01:58)
        ✔ string -> int / float @done(18-04-27 01:58)
        ✔ int / string / bool in bool expression @done(18-04-27 01:58)

    ✔ Sum null values in SUM (arithmetic constraints) @done(18-04-27 01:58)
    ❑ Registers
    ✔ Negation @done(18-04-18 01:23)

To show:
    ✔ arithmetic constraints with cycles @done(18-04-27 01:58)
    ✔ ontologies (let exps) @done(18-04-27 01:58)
    ✔ value expressions @done(18-04-27 01:58)
    ✔ simplified syntax @done(18-04-27 01:58)
    ✔ graph-ml import @done(18-04-27 01:58)
    ✔ last nodes before sink @done(18-04-27 01:58)