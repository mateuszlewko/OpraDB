%{
open OpraDB.AST
%}

%start query

%token <int> INT
%token <float> FLOAT
%token <string> ID
%token <string> STRING /* "string literal" */
%token TRUE
%token FALSE
%token NULL

%token LBRACE    /* { */
%token RBRACE    /* } */
%token LBRACK    /* [ */
%token RBRACK    /* ] */
%token LANGBRACK /* < */
%token RANGBRACK /* > */
%token LPAREN    /* ( */
%token RPAREN    /* ) */

%token AT        /* @  */
%token AT_APOS   /* @' */
%token ARROW     /* -> */
%token APOS      /* '  */
%token COLON     /* :  */
%token SEMICOLON /* ;  */
%token DOT       /* .  */
%token COMMA     /* ,  */
%token EOF       /* end of file */

%token LET IN 

%token MATCH NODES PATHS SUCH THAT WHERE HAVING SUM BY

%token STAR
%token LEQ GEQ LE GE NEQ EQ PLUS MINUS DIV MULT AND OR NOT IS

%left AND OR
%left LEQ GEQ EQ LE GE NEQ 
%left PLUS MINUS
%left DIV MULT

%token PIPE

%type <OpraDB.AST.Query> query

%%

id: ID { Identifier.ID $1 }

id_list:
  | id COMMA id_list { $1::$3 }
  | id               { [$1]   }

nodes: NODES id_list { List.rev $2 } | { [] }

paths: PATHS id_list { List.rev $2 } | { [] }

path_constr: id COLON id ARROW id { { path = $1; source = $3; target = $5 } }

path_constr_elems:
  | path_constr COMMA path_constr_elems { $1::$3 }
  | path_constr                         { [$1]   }

path_constrs: SUCH THAT path_constr_elems { List.rev $3 } | { [] }

operator:
  | LEQ { Leq }
  | LE  { Le  }
  | GEQ { Geq } 
  | GE  { Ge  }
  | EQ  { Eq  }
  | NEQ { Neq }

node_var:
  | AT id      { CurrNodeVar $2 }
  | AT_APOS id { NextNodeVar $2 }

node_vars:
  | node_var COMMA node_vars { $1::$3 }
  | node_var                 { [$1]   }

literal:
  | INT    { Int    $1    }
  | TRUE   { Bool   true  }
  | FALSE  { Bool   false }
  | FLOAT  { Float  $1    }
  | STRING { String $1    }
  | NULL   { Null         }

labelling: id LPAREN node_vars RPAREN { ($1, $3) }

arith_op:
  | PLUS  { Add  }
  | MINUS { Sub  }
  | MULT  { Mult }
  | DIV   { Div  }

bool_op:
  | LEQ    { Leq   }   
  | LE     { Le    }  
  | GEQ    { Geq   }   
  | GE     { Ge    }  
  | EQ     { Eq    }  
  | NEQ    { Neq   }   
  | AND    { And   }   
  | OR     { Or    }  
  | IS     { Is    } 
  | IS NOT { IsNot }    

value_expr:
  | literal                        { Lit $1               }
  | labelling                      { Labelling $1         }
  | value_expr arith_op value_expr { ArithOp ($1, $2, $3) }
  | value_expr bool_op value_expr  { BoolOp ($1, $2, $3)  }

reg_expr:
  | DOT                      { AnyExp             }
  | reg_expr MULT            { StarExp $1         }
  | reg_expr PIPE reg_expr   { UnionExp ($1, $3)  }
  | LPAREN value_expr RPAREN { NodeExp $2         }
  | LPAREN reg_expr RPAREN   { $2                 }
  | reg_expr reg_expr        { ConcatExp ($1, $2) }

reg_constr_elems: 
  | reg_expr COMMA reg_constr_elems { $1::$3 }
  | reg_expr                        { [$1]   }

reg_constrs: WHERE reg_constr_elems { $2 } | { [] }

value_expr_arith:
  | literal                                    { Lit $1               }
  | labelling                                  { Labelling $1         }
  | value_expr_arith arith_op value_expr_arith { ArithOp ($1, $2, $3) }
  | value_expr_arith bool_op value_expr_arith  { BoolOp  ($1, $2, $3) }
  | SUM LPAREN value_expr RPAREN               { Ext (Sum $3)         }

arith_constr: 
  | SUM LPAREN value_expr RPAREN { Sum   $3 }
  | value_expr_arith             { AC.Value $1 }

arith_constr_elems: 
  | arith_constr COMMA arith_constr_elems { $1::$3 }
  | arith_constr                          { [$1]   }

arith_constrs: HAVING arith_constr_elems { $2 } | { [] }

basic_query: MATCH nodes paths path_constrs reg_constrs arith_constrs
             { { nodes = $2
               ; paths = $3
               ; pathConstraints = $4
               ; regularConstraints = $5
               ; arithmeticConstraints = $6 } }

arg_list:
  | id arg_list { $1::$2 }
  | id          { [$1]   }

let_body:
  | basic_query  { Query   $1 }
  | reg_expr     { Regular $1 }
  | value_expr   { Value   $1 }
  | arith_constr { Arith   $1 }

let_exp:
  | LET id arg_list EQ let_body IN { { name = $2; args = $3; body = $5 } }

let_exps:
  | let_exp let_exps { $1::$2 }
  |                  { []     }

query:
  | let_exps basic_query { { letExps = $1
                           ; basic = $2 } }
  | query EOF            { $1             }