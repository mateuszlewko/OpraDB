{

module Lexer
#nowarn "1125"

open Microsoft.FSharp.Text.Lexing
open System
open Grammar

exception SyntaxError of string

let lexeme = LexBuffer.LexemeString
let newline (lexbuf:LexBuffer<_>) = lexbuf.EndPos <- lexbuf.EndPos.NextLine

}

let int   = ['-' '+']? ['0'-'9']+
let digit = ['0'-'9']
let frac  = '.' digit*
let exp   = ['e' 'E'] ['-' '+']? digit+
let float = '-'? digit* frac? exp?

let letter       = ['A'-'Z'] | ['a'-'z']
let id_init      = letter  | '_'
let id_cont      = id_init | ''' | digit 
let id_nest_cont = id_init | ['.' '''] | digit 
let id           = id_init id_cont*
let id_nest      = id_init id_nest_cont*

let white   = [' ' '\t']+
let newline = '\r' | '\n' | "\r\n"

rule read =
  parse
  | white    { read lexbuf }
  | newline  { newline lexbuf; read lexbuf }
  | int      { INT (int (lexeme lexbuf)) }
  (*| float    { FLOAT (float (lexeme lexbuf)) } *)
  | "true"   { TRUE  }
  | "false"  { FALSE }
  | "NULL"   { NULL  }
  | "NOT"    { NOT   }
  | "IS"     { IS    }
  | "AND"    { AND   }
  | "OR"     { OR    }
  | "IF"     { IF    }
  | "ELSE"   { ELSE  }
  | "THEN"   { THEN  }

  | '"'      { read_string "" false lexbuf } 

  | "NODES"  { NODES  }   
  | "MATCH"  { MATCH  }   
  | "SUCH"   { SUCH   }  
  | "THAT"   { THAT   }  
  | "WHERE"  { WHERE  }   
  | "HAVING" { HAVING }   
  | "SUM"    { SUM    } 
  | "MIN"    { MIN    } 
  | "MAX"    { MAX    } 
  | "BY"     { BY     }
  | "LET"    { LET    } 
  | "IN"     { IN     }

  | '{'      { LBRACE }
  | '}'      { RBRACE }
  | '['      { LBRACK }
  | ']'      { RBRACK }
  (* | '<'      { LANGBRACK } *)
  (* | '>'      { RANGBRACK } *)
  | '('      { LPAREN }
  | ')'      { RPAREN }

  | "<="     {LEQ }
  | '<'      {LE }
  | '>'      {GE }
  | ">="     {GEQ }
  | '='      {EQ }
  | "<>"     {NEQ }
  | '+'      {PLUS }
  | '-'      {MINUS }
  | '*'      {MULT }
  | '/'      {DIV }

  | "->"     { ARROW }
  | "@'"     { AT_APOS }
  | '|'      { PIPE }
  (* | '*'      { STAR } *)
  | '@'      { AT }
  | '''      { APOS }
  | ':'      { COLON }
  | ';'      { SEMICOLON }
  | '.'      { DOT }
  | ','      { COMMA }
  
  | id_nest  { ID (lexeme lexbuf) }
  
  | eof      { EOF }
  | _ { raise (Exception (sprintf "SyntaxError: Unexpected char: '%s' \
                                   Line: %d Column: %d" 
                                  (lexeme lexbuf) (lexbuf.StartPos.Line+1) 
                                  lexbuf.StartPos.Column)) }


and read_string str ignorequote =
  parse
  | '"'           { if ignorequote  
                    then (read_string (str + "\\\"") false lexbuf) 
                    else STRING (str) }
  | '\\'          { read_string str true lexbuf }
  | [^ '"' '\\']+ { read_string (str + (lexeme lexbuf)) false lexbuf }
  | eof           { raise (Exception ("String is not terminated")) }
